#version 450

#define INFINITY 3.402823466e+38

layout (local_size_x=16, local_size_y=16) in;

struct Path {
    // bool evenodd;
    float opacity;
    uint segments;
    vec4 color;
    vec4 bounds;
    mat3 transform;
};

layout(set=0, binding=0) uniform ConfigBuffer {
    // bool clear;
    vec4 clear_color;
    vec2 resolution;
    mat3 view;
};

layout(set=1, binding=0) readonly buffer SegmentBuffer {
    float segments[];
};

layout(set=1, binding=1) readonly buffer PathBuffer {
    Path path[];
};

layout(set=1, binding=2, rgba8) writeonly uniform image2D fill;

float ccw(vec2 a, vec2 b, vec2 c) {
    return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);
}

float find_x(vec4 segment, float y) {
    return segment.x + (y - segment.y) * (segment.z - segment.x) / (segment.w - segment.y);
}

void main() {
    vec3 view_position = view * vec3(
        2 * gl_GlobalInvocationID.x / resolution.x - 1.0,
        -(2 * gl_GlobalInvocationID.y / resolution.y - 1.0),
        1
    );
    view_position.x *= resolution.x / resolution.y;

    uint idx = 0;
    for (uint i = 0; i < path.length(); i++) {
        vec3 position = path[i].transform * view_position;

        if (position.x > path[i].bounds.x && position.x < path[i].bounds.z &&
            position.y > path[i].bounds.y && position.y < path[i].bounds.w
        ) {
            uint intersections = 0;
            for (uint j = 0; j < path[i].segments; j++) {
                vec4 seg = vec4(
                    segments[4*idx], segments[4*idx+1],
                    segments[4*idx+2], segments[4*idx+3]
                );
                if (seg.y < position.y != seg.w < position.y && find_x(seg, position.y) > position.x)
                    intersections++;
                idx++;
            }

            if (intersections % 2 != 0) {
                imageStore(
                    fill,
                    ivec2(gl_GlobalInvocationID.xy),
                    path[i].opacity * path[i].color
                );
            } else {
                imageStore(fill, ivec2(gl_GlobalInvocationID.xy), clear_color);
            }
        }
    }
}